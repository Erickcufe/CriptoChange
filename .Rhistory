df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.ts.log <- log(df.ts)
df.stl <- stl(log(df.ts), s.window = "period")
plot(df.stl, main = "Decomposition by Loess")
df.dec <- decompose(df.ts.log)
plot(df.dec)
df.season.adjusted <- df.ts.log - df.dec$seasonal
results <- list("Seasonal Decomposition of Time Series by Loess" = df.stl,
"Classical Seasonal Decomposition by Moving Averages" = df.dec,
"Seasonal Adjusted" = df.season.adjusted)
return(results)
}
jj <- Cripto_seasonal_analysis(df, "WEEKLY")
devtools::load_all(".")
#' @import
#' magrittr
#'
#' @examples
#'
#' ETH <- Cripto_time_series(cripto = "ETH", temp = "MONTHLY")
#' Cripto_seasonal_analysis(ETH, "MONTHLY")
#'
#' @rdname Cripto_seasonal_analysis
#' @export Cripto_seasonal_analysis
Cripto_seasonal_analysis <- function(df, temp, Date="Date"){
x_var <- enquo(Date)
df <- df %>% dplyr::arrange(x_var)
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
}
if(temp=="WEEKLY"){
interval <- 52
}
if(temp=="MONTHLY"){
interval <- 12
}
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.ts.log <- log(df.ts)
df.stl <- stl(log(df.ts), s.window = "period")
plot(df.stl, main = "Decomposition by Loess")
df.dec <- decompose(df.ts.log)
plot(df.dec)
df.season.adjusted <- df.ts.log - df.dec$seasonal
results <- list("Seasonal Decomposition of Time Series by Loess" = df.stl,
"Classical Seasonal Decomposition by Moving Averages" = df.dec,
"Seasonal Adjusted" = df.season.adjusted)
return(results)
}
devtools::load_all(".")
#' @import
#' magrittr
#'
#' @examples
#'
#' ETH <- Cripto_time_series(cripto = "ETH", temp = "MONTHLY")
#' Cripto_seasonal_analysis(ETH, "MONTHLY")
#'
#' @rdname Cripto_seasonal_analysis
#' @export Cripto_seasonal_analysis
Cripto_seasonal_analysis <- function(df, temp, Date="Date"){
x_var <- enquo(Date)
df <- df %>% dplyr::arrange(x_var)
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
}
if(temp=="WEEKLY"){
interval <- 52
}
if(temp=="MONTHLY"){
interval <- 12
}
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.ts.log <- log(df.ts)
df.stl <- stl(log(df.ts), s.window = "period")
plot(df.stl, main = "Decomposition by Loess")
df.dec <- decompose(df.ts.log)
plot(df.dec)
df.season.adjusted <- df.ts.log - df.dec$seasonal
results <- list("Seasonal Decomposition of Time Series by Loess" = df.stl,
"Classical Seasonal Decomposition by Moving Averages" = df.dec,
"Seasonal Adjusted" = df.season.adjusted)
return(results)
}
jj <- Cripto_seasonal_analysis(df, "WEEKLY")
#' @import
#' magrittr
#'
#' @examples
#'
#' ETH <- Cripto_time_series(cripto = "ETH", temp = "MONTHLY")
#' Cripto_seasonal_analysis(ETH, "MONTHLY")
#'
#' @rdname Cripto_seasonal_analysis
#' @export Cripto_seasonal_analysis
Cripto_seasonal_analysis <- function(df, temp, Date="Date"){
x_var <- quo(Date)
df <- df %>% dplyr::arrange(x_var)
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
}
if(temp=="WEEKLY"){
interval <- 52
}
if(temp=="MONTHLY"){
interval <- 12
}
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.ts.log <- log(df.ts)
df.stl <- stl(log(df.ts), s.window = "period")
plot(df.stl, main = "Decomposition by Loess")
df.dec <- decompose(df.ts.log)
plot(df.dec)
df.season.adjusted <- df.ts.log - df.dec$seasonal
results <- list("Seasonal Decomposition of Time Series by Loess" = df.stl,
"Classical Seasonal Decomposition by Moving Averages" = df.dec,
"Seasonal Adjusted" = df.season.adjusted)
return(results)
}
jj <- Cripto_seasonal_analysis(df, "WEEKLY")
x_var <- quo(Date)
x_var
df <- df %>% dplyr::arrange(x_var)
#' @import
#' magrittr
#'
#' @examples
#'
#' ETH <- Cripto_time_series(cripto = "ETH", temp = "MONTHLY")
#' Cripto_seasonal_analysis(ETH, "MONTHLY")
#'
#' @rdname Cripto_seasonal_analysis
#' @export Cripto_seasonal_analysis
Cripto_seasonal_analysis <- function(df, temp, Date="Date"){
x_var <- quo(Date)
df <- df %>% dplyr::arrange(!!x_var)
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
}
if(temp=="WEEKLY"){
interval <- 52
}
if(temp=="MONTHLY"){
interval <- 12
}
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.ts.log <- log(df.ts)
df.stl <- stl(log(df.ts), s.window = "period")
plot(df.stl, main = "Decomposition by Loess")
df.dec <- decompose(df.ts.log)
plot(df.dec)
df.season.adjusted <- df.ts.log - df.dec$seasonal
results <- list("Seasonal Decomposition of Time Series by Loess" = df.stl,
"Classical Seasonal Decomposition by Moving Averages" = df.dec,
"Seasonal Adjusted" = df.season.adjusted)
return(results)
}
jj <- Cripto_seasonal_analysis(df, "WEEKLY")
devtools::load_all(".")
devtools::load_all(".")
#' @import
#' magrittr
#'
#' @examples
#'
#' ETH <- Cripto_time_series(cripto = "ETH", temp = "MONTHLY")
#' Cripto_seasonal_analysis(ETH, "MONTHLY")
#'
#' @rdname Cripto_seasonal_analysis
#' @export Cripto_seasonal_analysis
Cripto_seasonal_analysis <- function(df, temp, Date="Date"){
x_var <- quo(Date)
df <- df %>% dplyr::arrange(!!x_var)
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
}
if(temp=="WEEKLY"){
interval <- 52
}
if(temp=="MONTHLY"){
interval <- 12
}
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.ts.log <- log(df.ts)
df.stl <- stl(log(df.ts), s.window = "period")
plot(df.stl, main = "Decomposition by Loess")
df.dec <- decompose(df.ts.log)
plot(df.dec)
df.season.adjusted <- df.ts.log - df.dec$seasonal
results <- list("Seasonal Decomposition of Time Series by Loess" = df.stl,
"Classical Seasonal Decomposition by Moving Averages" = df.dec,
"Seasonal Adjusted" = df.season.adjusted)
return(results)
}
devtools::load_all(".")
Cripto_Holt_Winters <- function(df, temp, n_predict){
df <- df %>% dplyr::arrange(Date)
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
}
if(temp=="WEEKLY"){
interval <- 52
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
}
if(temp=="MONTHLY"){
interval <- 12
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date))
}
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.hw <- HoltWinters(df.ts)
plot(df.hw, col="blue", col.predicted = "red")
df.fore <- forecast::forecast(df.hw, h = 6)
plot(df.fore)
df.fore$lower
df.fore$upper
}
r <- Cripto_Holt_Winters(df, "WEEKLY")
View(df)
df[order(df[,"Date"], decreasing = TRUE),]
df <- df[order(df[,"Date"], decreasing = FALSE),]
View(df)
str(df)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
#' Two plots of Time Series decomposition and a List with the results of decompisitions
#'
#'
#' @examples
#'
#' ETH <- Cripto_time_series(cripto = "ETH", temp = "MONTHLY")
#' Cripto_seasonal_analysis(ETH, "MONTHLY")
#'
#' @rdname Cripto_seasonal_analysis
#' @export Cripto_seasonal_analysis
Cripto_seasonal_analysis <- function(df, temp){
df <- df[order(df[,1], decreasing = FALSE),]
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
}
if(temp=="WEEKLY"){
interval <- 52
}
if(temp=="MONTHLY"){
interval <- 12
}
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.ts.log <- log(df.ts)
df.stl <- stl(log(df.ts), s.window = "period")
plot(df.stl, main = "Decomposition by Loess")
df.dec <- decompose(df.ts.log)
plot(df.dec)
df.season.adjusted <- df.ts.log - df.dec$seasonal
results <- list("Seasonal Decomposition of Time Series by Loess" = df.stl,
"Classical Seasonal Decomposition by Moving Averages" = df.dec,
"Seasonal Adjusted" = df.season.adjusted)
return(results)
}
devtools::load_all(".")
devtools::load_all(".")
df[order(df[,1], decreasing = FALSE),]
devtools::load_all(".")
usethis::use_r("Cripto_Arima")
devtools::load_all(".")
df.arima <- forecast::auto.arima(df.ts, parallel = TRUE)
summary(df.arima)
plot(df.arima)
plot(df.arima)
df.fore <- forecast::forecast(df.arima, h = n_predict)
devtools::load_all(".")
df.fore <- forecast::forecast(df.arima, h = 6)
plot(df.fore, col="red", fcol = "green")
devtools::load_all(".")
devtools::load_all(".")
D
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
Cripto_exchange?
Cripto_exchange??
))
?Cripto_exchange
?Cripto_Time_Series
devtools::load_all(".")
?Cripto_exchange
?Cripto_Time_Series
?Cripto_exchange
devtools::load_all(".")
?Cripto_exchange
?Cripto_seasonal_analysis
devtools::load_all(".")
?Cripto_exchange
devtools::load_all(".")
Cripto_time_series("BCH", "MXN","DAILY")
BCH_MXN <- Cripto_time_series("BCH", "MXN","DAILY")
season_BCH <- Cripto_seasonal_analysis(BCH_MXN, "DAILY")
season_BCH <- Cripto_Holt_Winters(BCH_MXN, "DAILY", 6)
View(BCH_MXN)
BCH_MXN <- Cripto_time_series("ETH", "MXN","DAILY")
season_BCH <- Cripto_Holt_Winters(BCH_MXN, "DAILY", 6)
View(season_BCH)
season_BCH[["mean"]]
season_BCH <- Cripto_Arima(BCH_MXN, "DAILY", 6)
View(season_BCH)
season_BCH[["mean"]]
usethis::use_vignette()
usethis::use_vignette("CriptoChange")
devtools::load_all(".")
library(CriptoChange)
library(CriptoChange)
df <- Cripto_time_series(cripto = "ETH",
market = "MXN",
temp = "MONTHLY")
results <- Cripto_seasonal_analysis(df = df, temp = "MONTHLY")
library(CriptoChange)
devtools::load_all(".")
usethis::use_test()
usethis::use_vignette()
usethis::use_vignette(CriptoDummy)
usethis::use_vignette("CriptoDummy")
devtools::load_all(".")
knit_with_parameters('~/CriptoDummy/vignettes/CriptoDummy.Rmd')
devtools::load_all(".")
usethis::use_mit_license()
usethis::use_mit_license(CriptoDummy)
usethis::use_mit_license("CriptoDummy")
library(CriptoDummy)
library(CriptoDummy)
devtools::load_all(".")
install.packages("CriptoDummy")
install.packages("CriptoDummy")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::check()
usethis::use_package("forecast")
usethis::use_package("stringr")
usethis::use_package("lubridate")
devtools::load_all(".")
devtools::check()
usethis::use_package("jsonlite")
devtools::check()
devtools::load_all(".")
devtools::load_all(".")
D
devtools::load_all(".")
df <- Cripto_time_series("ETH")
a <- Cripto_seasonal_analysis(df, "WEEKLY")
View(df)
str(df)
df <- df[order(df[,1], decreasing = FALSE),]
View(df)
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
View(df)
devtools::load_all(".")
a <- Cripto_seasonal_analysis(df, "WEEKLY")
devtools::load_all(".")
devtools::load_all(".")
b <- Cripto_Arima(df, "WEEKLY", 8)
df <- df[order(df[,1], decreasing = FALSE),]
start_date <- df$Date[nrow(df)]
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
if(temp=="DAILY"){
interval <- 365
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
}
if(temp=="WEEKLY"){
interval <- 52
start_date_1 <- c(lubridate::year(start_date),
lubridate::month(start_date),
lubridate::day(start_date))
}
interval <- 52
df.ts <- ts(df[,8], start = start_date_1,
frequency = interval)
df.arima <- forecast::auto.arima(df.ts, parallel = TRUE)
df.fore <- forecast::forecast(df.arima, h = n_predict)
n_predict <- 6
df.fore <- forecast::forecast(df.arima, h = n_predict)
plot(df.fore, col="red", fcol = "green")
plot(df.fore, col="red", fcol = "green")
df.arima <- forecast::auto.arima(df.ts, parallel = TRUE)
df.fore <- forecast::forecast(df.arima, h = n_predict)
plot(df.fore, col="red", fcol = "green")
devtools::load_all(".")
usethis::use_data_raw()
LTC_DAILY <- read.csv("data-raw/LTC-USD_daily.csv")
View(LTC_DAILY)
from <- "USD"
to <- "MXN"
B <- getQuote(paste0(from,to,"=X"))
## code to prepare `DATASET` dataset goes here
library(quantmod)
B <- getQuote(paste0(from,to,"=X"))
View(B)
View(B)
LTC_WEEKLY <- read.csv("data-raw/LTC-USD_weekly.csv")
LTC_MONTHLY <- read.csv("data-raw/LTC-USD_monthly.csv")
LTC_DAILY$Close_MXN <- LTC_DAILY$Adj.Close * B$Last
View(LTC_DAILY)
View(LTC_DAILY)
LTC_WEEKLY$Close_MXN <- LTC_WEEKLY$Adj.Close * B$Last
LTC_MONTHLY$Close_MXN <- LTC_MONTHLY$Adj.Close * B$Last
View(LTC_WEEKLY)
View(LTC_MONTHLY)
View(LTC_MONTHLY)
usethis::use_data(LTC_MONTHLY)
usethis::use_data(LTC_WEEKLY)
usethis::use_data(LTC_DAILY)
ETH_DAILY <- read.csv("data-raw/ETH-USD_daily.csv")
ETH_WEEKLY <- read.csv("data-raw/ETH-USD_weekly.csv")
ETH_MONTHLY <- read.csv("data-raw/ETH-USD_monthly.csv")
ETH_DAILY$Close_MXN <- ETH_DAILY$Adj.Close * B$Last
ETH_WEEKLY$Close_MXN <- ETH_WEEKLY$Adj.Close * B$Last
ETH_MONTHLY$Close_MXN <- ETH_MONTHLY$Adj.Close * B$Last
View(ETH_DAILY)
usethis::use_data(ETH_DAILY)
usethis::use_data(ETH_WEEKLY)
usethis::use_data(ETH_MONTHLY)
BAT_DAILY <- read.csv("data-raw/BAT-USD_daily.csv")
BAT_WEEKLY <- read.csv("data-raw/BAT-USD_weekly.csv")
BAT_MONTHLY <- read.csv("data-raw/BAT-USD_monthly.csv")
BAT_DAILY$Close_MXN <- BAT_DAILY$Adj.Close * B$Last
BAT_WEEKLY$Close_MXN <- BAT_WEEKLY$Adj.Close * B$Last
BAT_MONTHLY$Close_MXN <- BAT_MONTHLY$Adj.Close * B$Last
usethis::use_data(BAT_DAILY)
usethis::use_data(BAT_WEEKLY)
usethis::use_data(BAT_MONTHLY)
BCH_DAILY <- read.csv("data-raw/BCH-USD_daily.csv")
BCH_WEEKLY <- read.csv("data-raw/BCH-USD_weekly.csv")
BCH_MONTHLY <- read.csv("data-raw/BCH-USD_monthly.csv")
BCH_DAILY$Close_MXN <- BCH_DAILY$Adj.Close * B$Last
BCH_WEEKLY$Close_MXN <- BCH_WEEKLY$Adj.Close * B$Last
BCH_MONTHLY$Close_MXN <- BCH_MONTHLY$Adj.Close * B$Last
usethis::use_data(BCH_DAILY)
usethis::use_data(BCH_WEEKLY)
usethis::use_data(BCH_MONTHLY)
BTC_DAILY <- read.csv("data-raw/BTC-USD_daily.csv")
View(LTC_DAILY)
BTC_WEEKLY <- read.csv("data-raw/BTC-USD_weekly.csv")
BTC_MONTHLY <- read.csv("data-raw/BTC-USD_monthly.csv")
BTC_DAILY$Close_MXN <- BTC_DAILY$Adj.Close * B$Last
BTC_WEEKLY$Close_MXN <- BTC_WEEKLY$Adj.Close * B$Last
BTC_MONTHLY$Close_MXN <- BTC_MONTHLY$Adj.Close * B$Last
usethis::use_data(BTC_DAILY)
usethis::use_data(BTC_WEEKLY)
usethis::use_data(BTC_MONTHLY)
XRP_DAILY <- read.csv("data-raw/XRP-USD_daily.csv")
XRP_WEEKLY <- read.csv("data-raw/XRP-USD_weekly.csv")
XRP_MONTHLY <- read.csv("data-raw/XRP-USD_monthly.csv")
XRP_DAILY$Close_MXN <- XRP_DAILY$Adj.Close * B$Last
usethis::use_data(XRP_DAILY)
XRP_WEEKLY$Close_MXN <- XRP_WEEKLY$Adj.Close * B$Last
usethis::use_data(XRP_WEEKLY)
XRP_MONTHLY$Close_MXN <- XRP_MONTHLY$Adj.Close * B$Last
usethis::use_data(XRP_MONTHLY)
L
devtools::load_all(".")
df <- ETH_DAILY
View(df)
df <- df[order(df[,1], decreasing = FALSE),]
View(df)
